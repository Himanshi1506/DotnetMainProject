// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutBoundService.Infrastructure.Persistence;

namespace OutBoundService.Migrations
{
    [DbContext(typeof(OutboundDatabaseContext))]
    [Migration("20221026141805_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OutBoundService.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerEmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("DiscountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<double>("MaxDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("MinOrderAmount")
                        .HasColumnType("float");

                    b.HasKey("DiscountId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.OrderCustomer", b =>
                {
                    b.Property<int>("OrderCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("OrderCustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("OrderCustomer");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShipStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("ShipmentId");

                    b.HasIndex("TruckId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PoliceVerification")
                        .HasColumnType("bit");

                    b.HasKey("TruckId");

                    b.HasIndex("DriverId")
                        .IsUnique()
                        .HasFilter("[DriverId] IS NOT NULL");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Customer", b =>
                {
                    b.HasOne("OutBoundService.Domain.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.OrderCustomer", b =>
                {
                    b.HasOne("OutBoundService.Domain.Entities.Customer", "Customer")
                        .WithMany("OrderCustomers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("OutBoundService.Domain.Entities.Shipment", "Shipment")
                        .WithMany("Orders")
                        .HasForeignKey("ShipmentId");

                    b.Navigation("Customer");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("OutBoundService.Domain.Entities.Truck", "Truck")
                        .WithMany("Shipment")
                        .HasForeignKey("TruckId");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Truck", b =>
                {
                    b.HasOne("OutBoundService.Domain.Entities.Driver", "Driver")
                        .WithOne("Truck")
                        .HasForeignKey("OutBoundService.Domain.Entities.Truck", "DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Customer", b =>
                {
                    b.Navigation("OrderCustomers");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Driver", b =>
                {
                    b.Navigation("Truck");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OutBoundService.Domain.Entities.Truck", b =>
                {
                    b.Navigation("Shipment");
                });
#pragma warning restore 612, 618
        }
    }
}
